LPGROUPS
{
    #dragonfly_router can be in one group only!
    DRAGONFLY_GRP
    {
        repetitions = "33";
        codes-store="2";
        lsm="2";
        resource="2";
        test-checkpoint-client="30";
        modelnet_simplenet="1";
        modelnet_dragonfly_dally="32";
        modelnet_dragonfly_dally_router="8";
    }
    EXTERNAL_STR_GRP
    {
       repetitions="1";
       codes-external-store="1";
       modelnet_simplenet="1";
    }
}

PARAMS
{
# packet size in the network
   packet_size="4096";
   modelnet_order=( "dragonfly_dally","dragonfly_dally_router","simplenet");
   # scheduler options
   modelnet_scheduler="fcfs";
# chunk size in the network (when chunk size = packet size, packets will not be
# divided into chunks)
   chunk_size="4096";
# modelnet_scheduler="round-robin";
# number of routers in group
   num_routers="8";
# number of groups in the network
   num_groups="33";
# buffer size in bytes for local virtual channels
   local_vc_size="16384";
#buffer size in bytes for global virtual channels
   global_vc_size="16384";
#buffer size in bytes for compute node virtual channels
   cn_vc_size="32768";
#bandwidth in GiB/s for local channels
   local_bandwidth="5.25";
# bandwidth in GiB/s for global channels
   global_bandwidth="4.7";
# bandwidth in GiB/s for compute node-router channels
   cn_bandwidth="16.0";
# ROSS message size
   message_size="872";
# number of compute nodes connected to router, dictated by dragonfly config
# file
   num_cns_per_router="4";
# number of global channels per router
   num_global_channels="4";
# network config file for intra-group connections
   intra-group-connections="[path-to-experiment]/conf/network/dally-1056-intra";
# network config file for inter-group connections
   inter-group-connections="[path-to-experiment]/conf/network/dally-1056-inter";
# routing protocol to be used
   routing="prog-adaptive";
   minimal-bias="1";
   df-dally-vc = "1";

# simplenet params
    net_bw_mbps="1600.0";
    net_startup_ns="1000";

# counting msgs recv to/send from routers
   counting_bool="0";
   counting_start="0";
   counting_windows="1800";
   #interval in us
   counting_interval="300";
   num_apps="2";
   #offset for app_id: model-net-mpi-replay is 88, synthetic-dfly-plus is 24
   offset="144";
}

# triton server - implements forwarding and acking protocols based on placement
# algorithm 
codes-store
{
    # number of threads to multiplex transfers over
    req_threads = "4";
    # buffer size used by each thread
    thread_buf_sz = "1000000";
    # size of ram in bytes
    memory_size = "64000000000";
    # size of storage in bytes
    storage_size = "6400000000000";
    # burst buffer threshold in bytes
    bb_threshold = "1000000000000";
}

# size of LP buffer
resource
{
    available="6464000000000";
}

# params taken from triton-fault-sim configs
lsm
{
    # table of metrics based on requset size
    # here metrics will be used for any request size
    # request size in bytes
    request_sizes   = ("0"); 

    # write/read rates in MB/s
    write_rates     = ("5700.0");
    read_rates      = ("5700.0");

    # seek latency in microseconds
    write_seeks     = ("2500.0");
    read_seeks      = ("2500.0");

    # latency of completing the smallest I/O request, in microseconds
    write_overheads = ("20.0");
    read_overheads  = ("20.0");
}

test-checkpoint-client
{
    workload_type = "checkpoint_io_workload"; 
    # checkpoint size in terabytes
    checkpoint_sz = "1";
    # checkpoint write bandwidth in GiB/s
    checkpoint_wr_bw = "5.7";
    # runtime of the app in hours
    chkpoint_iters = "1";
    # mean time to interrupt 
    mtti = "36.0";
}

